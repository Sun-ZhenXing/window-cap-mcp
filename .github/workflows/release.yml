name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  build-rust:
    name: Build Rust Binary - ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: window-cap-mcp
            asset_name: window-cap-mcp-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: window-cap-mcp
            asset_name: window-cap-mcp-linux-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: window-cap-mcp.exe
            asset_name: window-cap-mcp-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: window-cap-mcp
            asset_name: window-cap-mcp-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: window-cap-mcp
            asset_name: window-cap-mcp-macos-aarch64

    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libwayland-dev libxrandr-dev libxcb1-dev libgbm-dev libxkbcommon-dev \
            libpipewire-0.3-dev pipewire \
            libavcodec-dev libavformat-dev libavutil-dev \
            libswscale-dev libasound2-dev \
            libegl1-mesa-dev

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install pkg-config

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Build Python extension
        run: cargo build --features python --release --target ${{ matrix.target }}
        env:
          RUSTFLAGS: ${{ runner.os == 'macOS' && '-C link-arg=-undefined -C link-arg=dynamic_lookup' || '' }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

  build-python:
    name: Build Python Wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            target: i686-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin

    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libwayland-dev libxrandr-dev libxcb1-dev libgbm-dev libxkbcommon-dev \
            libpipewire-0.3-dev pipewire \
            libavcodec-dev libavformat-dev libavutil-dev \
            libswscale-dev libasound2-dev \
            libegl1-mesa-dev

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install pkg-config

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel

      - name: Build wheels with cibuildwheel
        run: python -m cibuildwheel --output-dir dist
        env:
          CIBW_ARCHS_MACOS: x86_64,arm64
          CIBW_ARCHS_LINUX: x86_64,aarch64
          CIBW_ARCHS_WINDOWS: auto32,auto64
          RUSTFLAGS: ${{ runner.os == 'macOS' && '-C link-arg=-undefined -C link-arg=dynamic_lookup' || '' }}

      - name: Build source distribution
        run: |
          python -m pip install build
          python -m build --sdist
        if: runner.os == 'Linux' && matrix.target == 'x86_64-unknown-linux-gnu'

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-dist-${{ runner.os }}-${{ matrix.target }}
          path: |
            dist/*.whl
            dist/*.tar.gz

  create-release:
    name: Create Release
    needs: [build-rust, build-python]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          # Copy Rust binaries
          find artifacts -type f ! -name "*.whl" ! -name "*.tar.gz" -exec cp {} release-assets/ \;
          # Copy Python wheels
          find artifacts -type f -name "*.whl" -exec cp {} release-assets/ \;
          # Copy Python source packages
          find artifacts -type f -name "*.tar.gz" -exec cp {} release-assets/ \;
          ls -lh release-assets

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release v${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          files: release-assets/*
          generate_release_notes: true
          body: |
            ## Installation

            ### Rust Binary

            Download the appropriate binary for your platform:
            - Linux x86_64: `window-cap-mcp-linux-x86_64`
            - Linux ARM64: `window-cap-mcp-linux-aarch64`
            - Windows x86_64: `window-cap-mcp-windows-x86_64.exe`
            - macOS x86_64: `window-cap-mcp-macos-x86_64`
            - macOS ARM64 (Apple Silicon): `window-cap-mcp-macos-aarch64`

            ### Python Package

            ```bash
            pip install window-cap-mcp-${{ steps.get_version.outputs.VERSION }}-cp<pyver>-cp<pyver>-<platform>.whl
            ```
